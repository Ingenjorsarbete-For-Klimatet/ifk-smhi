# generated by datamodel-codegen:
#   filename:  https://opendata-download-metobs.smhi.se/api/version/1.0.json
#   timestamp: 2024-03-23T21:07:52+00:00

from __future__ import annotations

from typing import List, Optional, Tuple

from pydantic import BaseModel, Field, field_validator


class MetobsParameterItem(BaseModel):
    key: Optional[str]
    title: str
    summary: str
    unit: str


class MetobsParameterLinkItem(BaseModel):
    href: str
    rel: str
    type: str


class MetobsParameterGeoBox(BaseModel):
    min_latitude: float = Field(..., alias="minLatitude")
    min_longitude: float = Field(..., alias="minLongitude")
    max_latitude: float = Field(..., alias="maxLatitude")
    max_longitude: float = Field(..., alias="maxLongitude")


class MetobsParameterResourceItem(BaseModel):
    key: Optional[str] = None
    updated: Optional[int] = None
    title: str
    summary: str
    link: List[MetobsParameterLinkItem]
    unit: str
    geo_box: MetobsParameterGeoBox = Field(..., alias="geoBox")


class MetobsParameterModel(BaseModel):
    key: Optional[str] = None
    updated: Optional[int] = None
    title: str
    summary: str
    link: List[MetobsParameterLinkItem]
    resource: List[MetobsParameterResourceItem]

    @field_validator("resource")
    @classmethod
    def serialise_resource_in_order(cls, resource: List[MetobsParameterResourceItem]):
        return sorted(resource, key=lambda x: int(x.key))

    @property
    def data(self) -> Tuple[MetobsParameterItem, ...]:
        return tuple(
            MetobsParameterItem(
                key=x.key, title=x.title, summary=x.summary, unit=x.unit
            )
            for x in self.resource
        )
