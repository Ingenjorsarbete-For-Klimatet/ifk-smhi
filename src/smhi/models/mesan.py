# generated by datamodel-codegen:
#   filename:  https://opendata-download-metanalys.smhi.se/api/category/mesan2g/version/1/geotype/polygon.json
#   timestamp: 2024-03-24T20:37:11+00:00

from __future__ import annotations

from typing import Dict, List, Optional

import pandas as pd
import pandera as pa
from pandera.typing import DataFrame, Series
from pydantic import BaseModel, ConfigDict, Field


class MesanValidTime(BaseModel):
    status: int
    headers: Dict[str, str]
    valid_time: str = Field(..., alias="validTime")


class MesanApprovedTime(BaseModel):
    status: int
    headers: Dict[str, str]
    approved_time: str = Field(..., alias="approvedTime")
    reference_time: str = Field(..., alias="referenceTime")


class MesanPolygon(BaseModel):
    status: int
    headers: Dict[str, str]
    type_: str = Field(..., alias="type")
    coordinates: List[List[List[float]]]


class MesanParameterItem(BaseModel):
    name: str
    key: str
    level_type: str = Field(..., alias="levelType")
    level: int
    unit: str
    missing_value: int = Field(..., alias="missingValue")


class MesanParameters(BaseModel):
    status: int
    headers: Dict[str, str]
    parameter: List[MesanParameterItem]


class MesanMultiPointDataSchema(pa.DataFrameModel):
    lat: Series[float]
    lon: Series[float]
    value: Series[float]


class MesanPointData(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    status: int
    headers: Dict[str, str]
    approved_time: str
    reference_time: str
    valid_time: str
    level_unit: str
    df: Optional[pd.DataFrame]


class MesanMultiPointData(BaseModel):
    status: int
    headers: Dict[str, str]
    approved_time: str
    reference_time: str
    valid_time: str
    df: DataFrame[MesanMultiPointDataSchema]
